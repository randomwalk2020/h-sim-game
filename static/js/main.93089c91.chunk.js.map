{"version":3,"sources":["util.js","actions/actions.js","reducers/settingsReducer.js","reducers/girlsReducer.js","reducers/locationsReducer.js","reducers/rootReducer.js","components/navbar.jsx","components/WelcomeHome.jsx","containers/NavBarContainer.jsx","components/InfoBox.jsx","containers/InfoBoxContainer.jsx","components/Home.jsx","containers/HomeContainer.jsx","components/sidebar.jsx","containers/SideBarContainer.jsx","components/building.jsx","containers/BuildingContainer.jsx","components/restSchool.jsx","containers/RestSchoolContainer.jsx","components/chooseServices.jsx","components/TransactionModal.jsx","containers/TransactionModalContainer.jsx","components/management.jsx","components/advertising.jsx","components/market.jsx","components/missions.jsx","components/joker.jsx","components/stats.jsx","components/newday.jsx","App.js","index.js"],"names":["handleOnDragStart","e","girl","oldLocation","dataTransfer","setData","handleOnDragOver","preventDefault","console","log","currentTarget","style","backgroundColor","handleOnDragEnter","handleOnDragLeave","numberWithCommas","x","toString","replace","createMessage","expNeeded","GIRL_LOGO_PATHS","A2","SAKURA","GIRL_PROFILE_PATHS","PRICES","BUILDING","UPGRADE","INVENTORY","ABILITIES_SERVICES","INFOBOX_DATA","NAVBAR","NONE","HOME","GOLD","MANAGEMENT","ADS","MARKET","MISSIONS","JOKER","STATS","MANAGEMENT_BUILDINGS","OLDSHACK","SMALL_HOUSE","HOUSE","MANSION","PALACE","BAR","POOL","GARDEN","MANAGEMENT_SIDEBAR","RANK","LOCATION","PRICE","COST","MINUS10","PLUS10","ESTIMATE","health","beauty","libido","fuck","blowjob","intelligence","charisma","obedience","joy","reputation","exp","ABILITIES","updateInfoBox","info","component","type","updateGirlLocation","newLocation","payload","handleTransaction","transactionInfo","category","item","building","girlName","cost","newServices","defaultState","day","gold","infobox","difficulty","weeklyJoker","monthlyJoker","missionsCompleted","settingsReducer","previousState","action","Object","assign","level","buildingPrice","upgradePrice","rank","location","price","stats","potentialAbilities","abilities","inventory","services","girlsReducer","newPrice","statName","statNum","oldExp","Math","round","currentXP","ability","RESTING","girls","SCHOOL","bondage","BUILDINGS_OWNED","locationsReducer","newState","oldGirlsLocation","newGirlsLocation","slice","filter","str","i","length","map","push","boughtBuilding","concat","newGirls","rootReducer","combineReducers","locations","settings","NavBar","currentNavLink","handleClickNavLink","rightNavLinks","navlink","idx","key","onClick","className","onMouseOver","onMouseOut","id","WelcomeHome","connect","state","dispatch","handleSetDifficulty","InfoBox","Home","homeBody","bottomInfoBox","setDifficulty","daysLeft","InfoBoxContainer","SideBar","name","updateGirlPrice","updateGirlStat","handleConfirmTransaction","tableRows","keys","ceil","_e","alert","pop","abilitiesList","includes","inventoryList","equipment","toLowerCase","servicesList","service","src","alt","girlObj","currentServices","ownProps","sidebarItem","infoboxCategory","Building","props","generateRooms","handleClickGirl","currentSelection","onDragStart","generateUpgrades","buildingsOwned","upgradesOwned","buildingBought","upgrades","upgrade","buildingIsOwned","buyBuildingModal","mouseOverBuyBuildingButton","this","buildingNode","parentElement","setState","onMouseEnter","firstElementChild","display","onMouseLeave","onDragOver","onDragEnter","onDragLeave","onDrop","data","getData","split","enoughRooms","React","Component","buildingName","RestSchool","resting","school","girlsResting","draggable","ChooseServices","handleChecked","getServices","allServices","servicesObj","forEach","handleCloseModal","onChange","isChecked","checked","currentNumChecked","newNumChecked","validService","blowjobStat","obedienceStat","fuckStat","isValidService","message","neededStatName","neededStatNum","servicesInfo","TransactionModal","unit","prompt","requiredRank","updateGirlXP","rankNeeded","Management","displayTransactionModal","buildings","transactionModal","TransactionModalContainer","SideBarContainer","BuildingContainer","RestSchoolContainer","Advertising","Market","Missions","Joker","Stats","NewDay","store","createStore","App","newNavLink","activeNavLink","window","getState","HomeContainer","document","addEventListener","root","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.93089c91.chunk.js","sourcesContent":["// HELPER FUNCTIONS ************************************************************\n// FOR DRAGGING/DROPPING\nexport const handleOnDragStart = (e, girl, oldLocation) => {\n  // oldLocation == 'RESTING'\n\n  e.dataTransfer.setData(\"Text\", girl + ' ' + oldLocation);\n}\n\n\nexport const handleOnDragOver = (e) => {\n  e.preventDefault();\n  console.log('over');\n  e.currentTarget.style.backgroundColor = \"lightblue\";\n}\n\n\nexport const handleOnDragEnter = (e) => {\n  e.preventDefault();\n  console.log('enter');\n}\n\n\nexport const handleOnDragLeave = (e) => {\n  e.preventDefault();\n  console.log('leave');\n\n  // reset background color of building\n  e.currentTarget.style.backgroundColor = 'white';\n}\n\n\n// text == \"BAR\", \"OPIUM_DEN\", \"POOL\", \"GARDEN\", \"Add Room\"\n// \"OPIUM_DEN\" => \"opium den\"\n// \"Add Room\" => \"add room\"\n// \"BAR\" => \"bar\"\nexport const removeUnderscore = (text) => {\n  return text.toLowerCase().split(\"_\").join(\" \");\n}\n\n\n// 30000 => \"30,000\"\nexport const numberWithCommas = (x) => {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\n\n// for displaying infobox message for sidebar stat buttons (management section)\nexport const createMessage = (expNeeded) => {\n  let message = `You need ${expNeeded} Experience Points to raise this stat`;\n\n  return message;\n}\n\n\n\n// CONSTANTS *******************************************************************\nexport const GIRL_LOGO_PATHS = {\n  A2: process.env.PUBLIC_URL + '/images/a2-sprite.png',\n  SAKURA: process.env.PUBLIC_URL + '/images/sakura-sprite.png',\n}\n\n\nexport const GIRL_PROFILE_PATHS = {\n  A2: process.env.PUBLIC_URL + '/images/a2-profile.jpg',\n  SAKURA: process.env.PUBLIC_URL + '/images/sakura-profile.jpg',\n}\n\n\nexport const PRICES = {\n  BUILDING: {\n    \"SMALL_HOUSE\": 10000,\n    \"HOUSE\": 20000,\n    \"MANSION\": 30000,\n    \"PALACE\": 40000\n  },\n\n  UPGRADE: {\n    \"BAR\": 1000,\n    \"OPIUM DEN\": 5000,\n    \"POOL\": 10000,\n    \"GARDEN\": 2000,\n    \"ADD ROOM\": 5000\n  },\n\n  INVENTORY: {\n    \"DRUGS\": 1000,\n    \"RING\": 1500,\n    \"PERFUME\": 50,\n    \"MAKEUP\": 100,\n    \"SILK DRESS\": 2000,\n    \"PET CAT\": 2000,\n    \"MIRROR\":100,\n    \"DILDO\": 25,\n    \"BIRTH CONTROL\": 500      // per week\n  }\n}\n\n\nexport const ABILITIES_SERVICES = {\n  ABILITIES: {\n    \"LUCKY\": 200,             // num = XP cost\n    \"STRONG\": 100,\n    \"NEGOTIATION\": 300,\n    \"ATHLETIC\": 50,\n    \"DEEP THROAT\": 25,\n    \"PAINFUL ANAL\": 75,\n    \"LOLITA\": 35,\n  },\n  SERVICES: {\n    \"BLOWJOB CONDOM\": 0,\n    \"BLOWJOB SPIT\": 50,\n    \"BLOWJOB SWALLOW\": 100, \n    \"SEX CONDOM\": 0,\n    \"SEX PULLOUT\": 50,\n    \"SEX CREAMPIE\": 200,\n    \"ANAL CONDOM\": 100,\n    \"ANAL CREAMPIE\": 150,\n    \"GANGBANG\": 200,\n    \"GFE\": 250\n  }\n}\n\n// export const SERVICES = {\n//   \"BLOWJOB CONDOM\": { stat:\"blowjob\", required: 10 },\n//   \"BLOWJOB SPIT\": { stat: \"blowjob\", required: 30 },\n//   \"BLOWJOB SWALLOW\": { stat: \"blowjob\", required: 80 },\n//   \"SEX CONDOM\": { stat:\"fuck\", required: 10 },\n//   \"SEX PULLOUT\": 50,\n//   \"SEX CREAMPIE\": 200,\n//   \"ANAL CONDOM\": 100,\n//   \"ANAL CREAMPIE\": 150,\n//   \"GANGBANG\": 200,\n//   \"GFE\": 250\n// }\n\n\n// ABILITIES (FROM OLD GAME)\n// SMART: Gain more XP (cost 6AP)\n// LOLITA: may gain 1% charisma each day (cost 2AP)\n\n\nexport const RANKS = {\n  1: \"Almost Beggar\",\n  2: \"Low-class prostitute\",\n  3: \"Middle-class prostitute\",\n  4: \"High-class prostitute\",\n  5: \"Nation-famous\",\n  6: \"World-famous\",\n  7: \"Legendary\"\n}\n\n// export const INFOBOX_NAVBAR = {\n//   NONE: null,\n//   HOME: null,\n//   GOLD: 'Currency to buy buildings, girls, advertising, etc...',\n//   MANAGEMENT: 'Click here to choose where girls will work',\n//   ADS: 'Click here to buy advertisement for your buildings to increase traffic',\n//   MARKET: 'Click here to buy girls',\n//   MISSIONS: 'Click here to view current monthly missions',\n//   JOKER: 'Joker',\n//   STATS: 'Click here to view your stats',\n//   'NEW DAY': 'Click here to begin a new day'\n// }\n\nexport const INFOBOX_DATA = {\n  NAVBAR: {\n    NONE: null,\n    HOME: null,\n    GOLD: 'Currency to buy buildings, girls, advertising, etc...',\n    MANAGEMENT: 'Click here to choose where girls will work',\n    ADS: 'Click here to buy advertisement for your buildings to increase traffic',\n    MARKET: 'Click here to buy girls',\n    MISSIONS: 'Click here to view current monthly missions',\n    JOKER: 'Joker',\n    STATS: 'Click here to view your stats',\n    'NEW DAY': 'Click here to begin a new day'\n  },\n\n  MANAGEMENT_BUILDINGS: {\n    NONE: null,\n    OLDSHACK: \"Old, decrepit, and far away from the main island, but it's a start\",\n    SMALL_HOUSE: \"Small house not on the main island, but better looking than the Old Shack\",\n    HOUSE: \"House on the main island, but not in a frequented area\",\n    MANSION: \"Mansion on the main island and located in a wealthier more frequented area\",\n    PALACE: \"Central palace in the middle of the main island. No one can come to the main island without visiting the Palace\",\n    BAR: \"With a bar, the customers and the girls will feel more at ease. The girls will be more obedient.\",\n    \"OPIUM DEN\": \"Everything you need to let your customers and the girls forget their problems using drugs. The girls will be more obedient and will work more often.\",\n    POOL: \"A pool will bring more joy to the girls, and increase a buildings attractiveness\",\n    GARDEN: \"A garden would bring more joy to the girls and increase a buildings attractiveness.\",\n    \"ADD ROOM\": \"Add a new room so another girl can work here.\",\n  },\n\n  MANAGEMENT_SIDEBAR: {\n    NONE: null,\n    RANK: \"rankaroo\",\n    LOCATION: \"location\",\n    PRICE: \"price\",\n    COST: \"cost\",\n    MINUS10: \"Decrease her price by 10\",\n    PLUS10: \"Increase her price by 10\",\n    ESTIMATE: \"Estimate her price\",\n\n    STATS: \"A girls stats will determine blah blah blah\",\n    // HEALTH: \"A girl can't work if her health reaches 0\",\n    // BEAUTY: \"beauty\",\n    // LIBIDO: \"libido\",\n    // FUCK: \"fuck stat\",\n    // BLOWJOB: \"blowjob stat\",\n    // INTELLIGENCE: \"Intelligence stat\",\n    // CHARISMA: \"Charisma\",\n    // OBEDIENCE: \"Obedience stat\",\n    // JOY: \"Joy stat\",\n    // REPUTATION: \"Reputation stat\",\n    // EXP: \"Experience Points\",\n    health: \"A girl can't work if her health reaches 0\",\n    beauty: \"beauty\",     // lowercase bec needs to match girls reducer default state\n    libido: \"libido\",\n    fuck: \"fuck stat\",\n    blowjob: \"blowjob stat\",\n    intelligence: \"Intelligence stat\",\n    charisma: \"Charisma\",\n    obedience: \"Obedience stat\",\n    joy: \"Joy stat\",\n    reputation: \"Reputation stat\",\n    exp: \"Experience Points\",\n\n    ABILITIES: \"Each girl can have up to 4 abilities that are unlocked when the girl is a certain rank.\",\n    \"LUCKY\": \"lucky\",\n    \"STRONG\": \"Strong\",\n    \"DEEP THROAT\": \"deep throat\",\n    \"PAINFUL ANAL\": \"painful anal\",\n    \"NEGOTIATION\": \"negoation\",\n    \"ATHLETIC\": \"Athletic\",\n\n    \"LUCKY_ENABLED\": \"lucky enabled!\",\n    \"STRONG_ENABLED\": \"Strong\",\n    \"DEEP THROAT_ENABLED\": \"deep throat enabled!\",\n    \"PAINFUL ANAL_ENABLED\": \"painful anal enabled!\",\n    \"NEGOTIATION_ENABLED\": \"negoation enabled!\",\n    \"ATHLETIC_ENABLED\": \"Athletic enabled!\",\n\n    \"INVENTORY\": \"inventory!\",\n    \"DRUGS\": \"Click to buy her drugs.\",\n    \"RING\": \"Click to buy her a magic ring.\",\n    \"PERFUME\": \"Click to buy her perfume.\",\n    \"MAKEUP\": \"Click to buy her makeup.\",\n    \"SILK DRESS\": \"Click to buy her a silk dress.\",\n    \"PET CAT\": \"Click to buy her a pet cat.\",\n    \"MIRROR\": \"Click to buy her a mirror\",\n    \"DILDO\": \"Click to buy her a dildo\",\n    \"BIRTH CONTROL\": \"Click to buy her birth control pills\",\n\n    \"DRUGS_BOUGHT\": \"Drugs bought!\",\n    \"RING_BOUGHT\": \"Ring bought\",\n    \"PERFUME_BOUGHT\": \"Perfume bought!\",\n    \"MAKEUP_BOUGHT\": \"Makeup bought!\",\n    \"SILK DRESS_BOUGHT\": \"Slik dress bought!\",\n    \"PET CAT_BOUGHT\": \"pet cat bought!\",\n    \"MIRROR_BOUGHT\": \"mirror bought!\",\n    \"DILDO_BOUGHT\": \"dildo bought!\",\n    \"BIRTH CONTROL_BOUGHT\": \"birth control bought!\",\n\n    \"SERVICES\": \"Click to choose services that she can offer\",\n    \"BLOWJOB CONDOM\": \"blowjob condom\",\n    \"BLOWJOB SPIT\": \"blowjob spit\",\n    \"BLOWJOB SWALLOW\": \"blowjob swallow\",\n    \"SEX CONDOM\": \"sex with condom\",\n    \"SEX PULLOUT\": \"sex no condom, but pull out method\",\n    \"SEX CREAMPIE\": \"sex creampie\",\n    \"ANAL CONDOM\": \"anal with condom\",\n    \"ANAL CREAMPIE\": \"anal no condom\",\n    \"GANGBANG\": \"gang bang!\",\n    \"GFE\": \"girl friend experience!\"\n  }\n}\n\n\n\n// *****************************************************************************\n// MATH HELPER FUNCTIONS\n// STATS => Obtained by:\n// - 1) EXP Points\n//   - 2) Working\n//     - 3) School\n//       - 4) Rank\n\n// ABILITIES => Obtained by:\n// - 1) RANK + XP\n//   - 2) School\n\n// SERVICES => Obtained by:\n// - 1) Corresponding Stat(must be high enough)\n//   - 2) School\n//     - 3)\n\n\nexport const determineReputation = () => {\n\n}\n\n\n// 100, 1   => 7\n// 10, 1    => 1\n// 60, 2    => 4\nexport const determineRank = (reputation, numBuildings) => {\n  // normalize numbers so they have the same similar upper/lower bounds (7)\n  // https://www.theanalysisfactor.com/rescaling-variables-to-be-same/\n  let normalizedReputation = ((reputation - 0) / 100) * 7;\n  let normalizedNumBuildings = ((numBuildings - 1) / 4) * 7;\n\n  const reputationWeight = .6;\n  const numBuildingsWeight = .4;\n\n  // take weighted average of both\n  let rank = normalizedNumBuildings * numBuildingsWeight + normalizedReputation * reputationWeight;\n\n  return Math.ceil(rank);\n}\n\n\nexport const girlCostPerDay = () => {\n\n}\n\n\nexport const girlEstimatedPricePerSession = () => {\n\n}\n\n\nexport const girlEarningsPerDay = () => {\n\n}\n\n\n// validates if girls stats are high enough to enable corresponding service\n// returns boolean true (if true)  or  string (if false)\nexport const isValidService = (girlObj, service ) => {\n\n  const blowjobStat = girlObj.stats.blowjob;\n  const obedienceStat = girlObj.stats.obedience;\n  const fuckStat = girlObj.stats.fuck;\n\n  switch (service) {\n    case \"BLOWJOB CONDOM\":\n      if (blowjobStat >= 10) {\n        return true;\n      } else {\n        return \"blowjob 10\";\n      }\n    case \"BLOWJOB SPIT\":\n      if (blowjobStat >= 30) {\n        return true;\n      } else {\n        return \"blowjob 30\";\n      }\n    case \"BLOWJOB SWALLOW\":\n      if (blowjobStat >= 80 && obedienceStat >= 80) {\n        return true;\n      } else {\n        return \"blowjob 30 obedience 80\";\n      }\n    case \"SEX CONDOM\":\n      if (fuckStat >= 10) {\n        return true;\n      } else {\n        return \"fuck 100\";\n      }\n    case \"SEX PULLOUT\":\n      if (fuckStat >= 50) {\n        return true;\n      } else {\n        return \"fuck 50\";\n      }\n    case \"SEX CREAMPIE\":\n      if (fuckStat >= 80 && obedienceStat >= 80) {\n        return true;\n      } else {\n        return \"fuck 80 obedience 80\";\n      }\n    case \"ANAL CONDOM\":\n      if (fuckStat >= 50 && obedienceStat >= 70) {\n        return true;\n      } else {\n        return \"fuck 50 obedience 70\";\n      }\n    case \"ANAL CREAMPIE\":\n      if (fuckStat >= 80 && obedienceStat >= 80) {\n        return true;\n      } else {\n        return \"fuck 80 obedience 80\";\n      }\n    case \"GANGBANG\":\n      if (fuckStat >= 60 && obedienceStat >= 70) {\n        return true;\n      } else {\n        return \"fuck 60 obedience 70\";\n      }\n    case \"GFE\":\n      if (fuckStat >= 80 && obedienceStat >= 90) {\n        return true;\n      } else {\n        return \"fuck 80 obedience 90\";\n      }\n    default:\n      return\n  }\n}\n\n\n\n\n\n\n\n\n// Blowjob CONDOM -> must have Blowjob Stat >= 10\n// Blowjob SPIT -> must have Blowjob Stat >= 30\n// Blowjob CIM -> must have Blowjob Stat >= 80 && Obedience Stat >= 80\n\n// SEX CONDOM -> must have FUCK Stat >= 10\n// SEX PULLOUT -> must have FUCK Stat >= 50 && Obedience Stat >= 70\n// SEX CREAMPIE -> must have FUCK Stat >= 80 && Obedience Stat >= 80\n\n// ANAL CONDOM -> must have FUCK Stat >= 50 && Obedience Stat >= 70\n// ANAL CREAMPIE -> must have FUCK Stat >= 80 && Obedience Stat >= 80\n\n// GANGBANG -> must have FUCK Stat >= 50 && Obedience Stat >= 80\n// GFE -> must have FUCK Stat >= 80 && Obedience Stat >= 90","import { INFOBOX_DATA, createMessage } from '../util';\n\n// ACTION TYPE CONSTANTS\nexport const SET_DIFFICULTY = 'SET_DIFFICULTY';\nexport const UPDATE_INFOBOX = 'UPDATE_INFOBOX';\nexport const UPDATE_GIRL_LOCATION = 'UPDATE_GIRL_LOCATION';\nexport const UPDATE_GIRL_PRICE = 'UPDATE_GIRL_PRICE';\nexport const BUY_BUILDING = 'BUY_BUILDING';\nexport const BUY_UPGRADE = 'BUY_UPGRADE';\nexport const UPDATE_GIRL_STAT = 'UPDATE_GIRL_STAT';\nexport const UPDATE_GIRL_XP = \"UPDATE_GIRL_XP\";\nexport const BUY_INVENTORY = \"BUY_INVENTORY\";\nexport const UPDATE_GIRL_SERVICES = \"UPDATE_GIRL_SERVICES\";\n\n\n\n// ACTION CREATORS (return actions)\nexport function setDifficulty(level) {\n  return ({\n    type: SET_DIFFICULTY,\n    level\n  });\n}\n\nexport function updateInfoBox(info, component, expNeeded=false) {\n  let infoboxMessage;\n  \n  // for + stat buttons on sidebar management\n  if (expNeeded) {\n    infoboxMessage = createMessage(expNeeded);\n  } else {\n    infoboxMessage = INFOBOX_DATA[component][info];\n  }\n\n  return({\n    type: UPDATE_INFOBOX,\n    // info: INFOBOX_DATA[component][info]\n    info: infoboxMessage\n  })\n}\n\nexport function updateGirlLocation(girl, oldLocation, newLocation) {\n  return ({\n    type: UPDATE_GIRL_LOCATION,\n    payload: { girl, oldLocation, newLocation }\n  })\n}\n\nexport function updateGirlPrice(girl, newPrice) {\n  return ({\n    type: UPDATE_GIRL_PRICE,\n    payload: { girl, newPrice },\n  })\n}\n\nexport function handleTransaction(transactionInfo) {\n  // transactionInfo == { type: 'BUY', category: 'BUILDING', item: 'SMALL_HOUSE' }\n  // transactionInfo == { type: \"BUY\", category: \"UPGRADE\", item: \"Add Room\", building: \"OLDSHACK\" }\n  let { type, category, item, building, girlName, cost, newServices  } = transactionInfo;\n\n  type = type + '_' + category;\n  // ex. type == 'BUY_BUILDING'\n  // ex. type == \"BUY_UPGRADE\"\n  \n  return ({\n    type: type,\n    payload: { item, category, building, girlName, cost, newServices }\n  });\n}\n\nexport function updateGirlStat(girl, statName, statNum, oldExp) {\n  // girl == \"SAKURA\"\n  // statName == \"beauty\"\n  // statNum == 80\n  // oldExp == 120\n\n  return ({\n    type: UPDATE_GIRL_STAT,\n    payload: { girl, statName, statNum, oldExp }\n  });\n}\n\nexport function updateGirlXP(girlName, currentXP, cost, ability) {\n  \n  return ({\n    type: UPDATE_GIRL_XP,\n    payload: { girlName, currentXP, cost, ability }\n  });\n}","import {\n  SET_DIFFICULTY,\n  UPDATE_INFOBOX,\n  BUY_BUILDING,\n  BUY_UPGRADE,\n  BUY_INVENTORY\n} from '../actions/actions';\nimport {\n  PRICES\n} from '../util';\n\n\nconst defaultState = {\n  day: 0,\n  // gold: 250,   // starting gold\n  gold: 30000,\n  infobox: null,\n  difficulty: null,\n  weeklyJoker: null,\n  monthlyJoker: null,\n  missionsCompleted: [],\n}\n\n\n// SETTINGS REDUCER\nconst settingsReducer = (previousState = defaultState, action) => {\n  let newState;\n  \n  const { item, category } = action.payload || {};\n\n  switch(action.type) {\n    case SET_DIFFICULTY:\n      newState = Object.assign({}, previousState, {\n        difficulty: action.level\n      });\n      return newState;\n\n    case UPDATE_INFOBOX:\n      newState = Object.assign({}, previousState, {\n        infobox: action.info\n      });\n      return newState;\n\n    case BUY_BUILDING:\n      // action.payload == { item: \"SMALL_HOUSE\", category: \"BUILDING\", building: undefined }\n      const buildingPrice = PRICES[category][item];\n\n      newState = Object.assign({}, previousState, {\n        gold: previousState.gold - buildingPrice\n      });\n      return newState;\n\n    case BUY_UPGRADE:\n      const upgradePrice = PRICES[category][item];\n      \n      newState = Object.assign({}, previousState, {\n        gold: previousState.gold - upgradePrice\n      });\n      return newState;\n\n    case BUY_INVENTORY:\n      newState = Object.assign({}, previousState, {\n        gold: previousState.gold - action.payload.cost\n      });\n      return newState;\n\n    default:\n      return previousState;\n  }\n}\n\nexport default settingsReducer;\n\n\n// Settings reducer slice of state example\n// settings: {\n//    day: 0,\n//    gold: 250,\n//    infobox: 'click here to buy adverstisements for buildings\",\n//    weeklyJoker: null,\n//    monthlyJoker: null,\n//    missionsCompleted: [],\n//    difficulty: null, \n//  } \n\n","import {\n  UPDATE_GIRL_LOCATION,\n  UPDATE_GIRL_PRICE,\n  UPDATE_GIRL_STAT,\n  UPDATE_GIRL_XP,\n  BUY_INVENTORY,\n  UPDATE_GIRL_SERVICES\n} from '../actions/actions';\n\n\nconst defaultState = {\n  \"A2\": {\n    rank: 1,\n    location: \"RESTING\",\n    price: 32,\n    cost: 21,\n    stats: {\n      health: 100,\n      beauty: 82,\n      libido: 41,\n      fuck: 52,\n      blowjob: 12,\n      intelligence: 91,\n      charisma: 30,\n      obedience: 36,\n      joy: 20,\n      reputation: 38,\n      exp: 0\n    },\n    potentialAbilities: [\"LUCKY\", \"STRONG\", \"NEGOTIATION\", \"ATHLETIC\" ],\n    abilities: [],\n    inventory: [],\n    services: [\"BLOWJOB CONDOM\", \"SEX CONDOM\"]\n  },\n  \"SAKURA\": {\n    rank: 3,\n    location: \"RESTING\",\n    price: 30,\n    cost: 20,\n    stats: {\n      health: 100,\n      beauty: 80,\n      libido: 52,\n      fuck: 51,\n      blowjob: 16,\n      intelligence: 87,\n      charisma: 59,\n      obedience: 70,\n      joy: 76,\n      reputation: 12,\n      exp: 2000\n    },\n    potentialAbilities: [ \"DEEP THROAT\", \"PAINFUL ANAL\", \"NEGOTIATION\", \"ATHLETIC\" ],\n    // abilities: [],\n    abilities: [\"DEEP THROAT\"],\n    inventory: [\"SILK DRESS\"],\n    services: [\"BLOWJOB CONDOM\", \"SEX CONDOM\", \"ANAL CONDOM\" ]\n  },\n  \"SAILOR MOON\": {\n    rank: 1,\n    location: null,\n    price: 25,\n    cost: 18,\n    stats: {},\n    abilities: [],\n    inventory: [],\n    services: []\n  },\n}\n\n\nconst girlsReducer = (previousState = defaultState, action) => {\n  let newState;\n\n  const { girl, newPrice, newLocation } = action.payload || {};\n\n  switch (action.type) {\n    case UPDATE_GIRL_LOCATION:\n      newState = Object.assign({}, previousState, {\n        [girl]: { ...previousState[girl], location: newLocation }\n      });\n\n      return newState;\n\n    case UPDATE_GIRL_PRICE:\n      newState = Object.assign({}, previousState, {\n        [girl]: { ...previousState[girl], price: newPrice }\n      });\n\n      return newState;\n\n    case UPDATE_GIRL_STAT:\n      const statName = action.payload.statName;\n      const statNum = action.payload.statNum;\n      const oldExp = action.payload.oldExp;\n      // girl == \"SAKURA\"\n      // statName == \"beauty\"\n      // statNum == 80\n      // oldExp == 121\n\n      newState = Object.assign({}, previousState, {\n        [girl]: { \n          ...previousState[girl], \n          stats: {\n            ...previousState[girl].stats,\n            // increase stat by 1%\n            [statName]: Math.round(statNum * (1 + .01)),\n\n            // decrease XP by old stat * 1.01\n            exp: Math.round(oldExp - statNum * (1 + .01))\n          }\n        }\n      });\n\n      return newState;\n\n    case UPDATE_GIRL_XP:\n      const { girlName, currentXP, cost, ability } = action.payload;\n\n      newState = Object.assign({}, previousState, {\n        [girlName]: {\n          ...previousState[girlName],\n          stats: {\n            ...previousState[girlName].stats,\n            // decrease her XP stat by cost\n            exp: currentXP - cost\n          },\n\n          // add new ability to girl\n          abilities: [...previousState[girlName].abilities, ability]\n        }\n      });\n      return newState;\n    \n    case BUY_INVENTORY:\n      // action.payload = { item: \"DRUGS\", category: \"INVENTORY\", building: undefined, girlName: \"SAKURA\", cost: 1000 }\n\n      newState = Object.assign({}, previousState, {\n        [action.payload.girlName]: {\n          ...previousState[action.payload.girlName],\n          // add item to girls inventory\n          inventory: [ ...previousState[action.payload.girlName].inventory, action.payload.item ],\n        }\n      });\n      return newState;\n\n    case UPDATE_GIRL_SERVICES:\n      // action.payload = { girlName: \"SAKURA\", newServices: [\"GFE\"] }\n\n      newState = Object.assign({}, previousState, {\n        [action.payload.girlName]: {\n          ...previousState[action.payload.girlName], \n          services: action.payload.newServices\n        }\n      });\n      return newState;\n\n    default:\n      return previousState;\n  }\n}\n\nexport default girlsReducer;\n\n\n// Girls reducer slice of state example\n// girls = {\n//  \"A2\": {\n//     rank: 1,\n//     location: \"RESTING\",\n//     price: 32,\n//     cost: 21,\n//     stats: {\n//       health: 100,\n//       beauty: 82,\n//       libido: 41,\n//       fuck: 52,\n//       blowjob: 12,\n//       intelligence: 91,\n//       charisma: 30,\n//       obedience: 36,\n//       joy: 20,\n//       reputation: 38,\n//       exp: 0\n//     },\n//     potentialAbilities: [\"LUCKY\", \"STRONG\", \"NEGOTIATION\", \"ATHLETIC\" ],\n//     abilities: [],\n//     inventory: [],\n//     services: [\"BLOWJOB CONDOM\", \"SEX CONDOM\"]\n//   },\n\n//   \"SAKURA\": {}, \n// }\n","import {\n  UPDATE_GIRL_LOCATION,\n  BUY_BUILDING,\n  // UPGRADE_BUILDING\n  BUY_UPGRADE\n} from '../actions/actions';\n\n\nconst defaultState = {\n  RESTING: {\n    girls: [\"A2\", \"SAKURA\"]\n  },\n  SCHOOL: {\n    bondage: [],\n  },\n  OLDSHACK: {\n    // each slot refers to a room\n    // true = bought but empty,   string = bought and filled,   null = not bought\n    // girls: [true, null, null, null],    \n    girls: [true, true, true, null],\n    // BAR: false, GARDEN: false, POOL: false, OPIUM_DEN: false,      \n    BAR: false, GARDEN: false, POOL: false, \"OPIUM DEN\": false,      \n  },\n  SMALL_HOUSE: {\n    girls: [null, null, null, null, null, null],\n    BAR: false, GARDEN: false, POOL: false, \"OPIUM DEN\": false, \n  },\n  HOUSE: {\n    girls: [null, null, null, null, null, null],\n    BAR: false, GARDEN: false, POOL: false, \"OPIUM DEN\": false, \n  },\n  MANSION: {\n    girls: [null, null, null, null, null, null, null, null],\n    BAR: false, GARDEN: false, POOL: false, \"OPIUM DEN\": false, \n  },\n  PALACE: {\n    girls: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],\n    BAR: false, GARDEN: false, POOL: false, \"OPIUM DEN\": false, \n  },\n  BUILDINGS_OWNED: [ \"OLDSHACK\" ]\n}\n\n\nconst locationsReducer = (previousState = defaultState, action) => {\n  let newState;\n  // debugger\n  const { girl, oldLocation, newLocation } = action.payload || {};\n\n  switch (action.type) {\n    case UPDATE_GIRL_LOCATION:\n      // debugger\n\n      let oldGirlsLocation;\n\n      // copy new location array from previous state\n      let newGirlsLocation = previousState[newLocation].girls.slice();\n      \n      // prevent duplication\n      if (newLocation === oldLocation) return previousState;\n\n      if (oldLocation === 'RESTING') {\n        // remove girl ex. \"A2\" from PREVIOUS location, but don't alter previous\n        oldGirlsLocation = previousState[oldLocation].girls.filter(str => str !== girl);\n        \n        // add girl to Resting array\n        // reassign girl ex. \"A2\" to NEW location\n        for (let i = 0; i < newGirlsLocation.length; i++) {\n          if (newGirlsLocation[i] === true) {\n            newGirlsLocation[i] = girl;\n            break;\n          }\n        }\n        \n      } else if (newLocation === 'RESTING') {\n        // remove girl ex. \"A2\" from PREVIOUS location, but don't alter previous\n        oldGirlsLocation = previousState[oldLocation].girls.map(str => str === girl ? true : str);\n        \n        newGirlsLocation.push(girl);\n      } else {\n        oldGirlsLocation = previousState[oldLocation].girls.map(str => str === girl ? true : str);\n        \n        // reassign girl ex. \"A2\" to NEW location\n        for (let i = 0; i < newGirlsLocation.length; i++) {\n          if (newGirlsLocation[i] === true) {\n            newGirlsLocation[i] = girl;\n            break;\n          }\n        }\n        \n      }\n      \n      newState = Object.assign({}, previousState, {\n        [oldLocation]: { ...previousState[oldLocation], girls: oldGirlsLocation },\n        [newLocation]: { ...previousState[newLocation], girls: newGirlsLocation },\n      });\n\n      return newState;\n\n    case BUY_BUILDING:\n      // action.payload.item == 'SMALL_HOUSE'\n\n      // copy girls array in building\n      let boughtBuilding = previousState[action.payload.item].girls.slice();\n      // boughtBuilding = {girls: [], bar:false, ... }\n\n      // make first room available/bought\n      boughtBuilding[0] = true;\n\n      // shallow copy\n      newState = Object.assign({}, previousState, {\n\n        // add building to BUILDINGS_OWNED\n        BUILDINGS_OWNED: previousState.BUILDINGS_OWNED.concat(action.payload.item),\n\n        // reassign the first value in array to true of building.girls\n        [action.payload.item]: {\n          ...previousState[action.payload.item],\n          girls: boughtBuilding\n        }\n      });\n\n      return newState;\n\n    // case UPGRADE_BUILDING:\n    case BUY_UPGRADE:\n      // action.payload == { item: \"Add Room\", building: \"OLDSHACK\" }\n      const { item, building } = action.payload;\n\n      if (item === \"ADD ROOM\") {\n        // copy girls array\n        let newGirls = previousState[building].girls.slice();\n        // newGirls == [true, true, true, null]\n        \n        // replace first null with true (null = room not bought, true = room bought)\n        // newGirls = newGirls.map(girl => girl === null ? true : girl);\n        for (let i = 0; i < newGirls.length; i++) {\n          let girl = newGirls[i];\n          if (girl === null) {\n            \n            newGirls[i] = true;\n            break;\n          }\n        }\n\n        newState = Object.assign({}, previousState, {\n          [building]: {\n            ...previousState[building],\n            girls: newGirls\n          }\n        });\n      } else {\n        newState = Object.assign({}, previousState, {\n          [building]: {\n            ...previousState[building],\n            [item]: true\n          }\n        });\n      }\n\n      return newState;\n\n    default:\n      return previousState;\n  }\n}\n\nexport default locationsReducer;\n\n\n// Settings reducer slice of state example\n// locations: {\n//   OLDSHACK: {\n//     bar: false, garden: false, lounge: false, pool: false,\n//     opiumRoom: false, status: 'operational', attractiveness: 20,\n//     daysUntilOperational: 0,\n//     girls: [\"A2\", \"SAKURA\", true, null ... ],\n//     ads: [ADS[0], ... ]\n//   },\n//   SMALL_HOUSE: { }, ...\n//   RESTING: { girls: [\"A2\", \"SAKURA\", true, null ... ], ... }\n//   SCHOOL: [\"A2\", \"SAKURA\", ... ]\n//   BUILDINGS_OWNED: [OLDSHACK]\n// }","import { combineReducers } from 'redux';\nimport settingsReducer from './settingsReducer';\nimport girlsReducer from './girlsReducer';\nimport locationsReducer from './locationsReducer';\n\nconst rootReducer = combineReducers({\n  girls: girlsReducer,\n  locations: locationsReducer,\n  settings: settingsReducer\n});\n\nexport default rootReducer;\n\n\n// Example Store 1\n// CONSTANTS\n// BUILDINGS = [\"old shack\", \"small house\", .. ]\n// GIRLS = [\"Sailor Moon\", \"Sakura\", \"A2\", ... ]\n// ADS = [\"Poster\", \"Hire Girl outside\", ... ]\n\n// REDUX STORE\n// Store = {\n//   girls: {\n//     A2: {\n//       rank: 1,\n//       location: BUILDINGS[0],\n//       price: 32,\n//       cost: 21,\n//       stats: {\n//         health: 100,\n//         beauty: 80,\n//         libido: 20,\n//         obedience: 20,\n//         EXP: 0,\n//         numDaysWorked: 0,\n//         numClientsServed: 0,\n//         ...\n// \t\t\t\t// *to add for future expansion below*\n// \t\t\t\t// strength: 80,\n// \t\t\t\t// agility: 80,\n// \t\t\t\t// magic: 40,\n// \t\t\t\t// type: 'fighting'\n// \t\t\t},\n//       abilities: [],\n//       inventory: [],\n//       clothes: [],\n//       // *to add for future expansion below*\n//       // attacks: [],\n//     },\n//     sakura: {}, ...\n// \t},\n//   buildings: {\n//     oldShack: {\n//       numRooms: 1, bar: false, garden: false, lounge: false, pool: false,\n//       opiumRoom: false, status: 'operational', attractiveness: 20,\n//       daysUntilOperational: 0,\n//       girls: [GIRLS[0], GIRLS[2], ... ],\n//       ads: [ADS[0], ... ]\n//     },\n//     smallHouse: {}, ...\n// \t},\n//   advertising: {\n//   },\n//   day: 0,\n//   gold: 250,\n//   weeklyJoker: null,\n//   monthlyJoker: null,\n//   missionsCompleted: [],\n//   difficulty: easy,\n// }\n\n\n\n\n\n\n\n// Example Store 2\n// CONSTANTS\n// const BUILDINGS = {\n//   OLDSHACK: \"old shack\",\n//   SMALLHOUSE: \"small house\",\n//   HOUSE: \"house\",\n//   MANSION: \"mansion\",\n//   PALACE: \"palace\"\n// }\n\n// const GIRLS = {\n//   0: \"Sailor Moon\",\n//   1: \"Sakura\",\n//   2: \"A2\"\n// }\n\n// ADS = [\"Poster\", \"Hire Girl outside\", ... ]\n\n// REDUX STORE\n// Store = {\n//   girls: {\n//     A2: {\n//       rank: 1,\n//       location: BUILDINGS[OLDSHACK],\n//       price: 32,\n//       cost: 21,\n//       stats: {\n//         health: 100,\n//         beauty: 80,\n//         libido: 20,\n//         obedience: 20,\n//         EXP: 0,\n//         numDaysWorked: 0,\n//         numClientsServed: 0,\n//         ...\n// \t\t\t\t// *to add for future expansion below*\n// \t\t\t\t// strength: 80,\n// \t\t\t\t// agility: 80,\n// \t\t\t\t// magic: 40,\n// \t\t\t\t// type: 'fighting'\n// \t\t\t},\n//       abilities: [],\n//       inventory: [],\n//       clothes: [],\n//       // *to add for future expansion below*\n//       // attacks: [],\n//     },\n//     sakura: {}, ...\n// \t},\n//  \n//  buildings: {\n//     oldShack: {\n//       numRooms: 1, bar: false, garden: false, lounge: false, pool: false,\n//       opiumRoom: false, status: 'operational', attractiveness: 20,\n//       daysUntilOperational: 0,\n//       girls: [0, 1, 2, ... ]\n//       ads: [ADS[0], ... ]\n//     },\n//     smallHouse: {}, ...\n// \t},\n// \n//  advertising: {\n//  },\n// \n//  settings: {\n//    day: 0,\n//    gold: 250,\n//    weeklyJoker: null,\n//    monthlyJoker: null,\n//    missionsCompleted: [],\n//    difficulty: null, \n//  } \n// }\n\n// 4 REDUCERS \n// GIRLS\n// BUILDINGS\n// ADVERTISING\n// SETTINGS","import React from 'react';\nimport { numberWithCommas } from '../util';\n\n// local state keeps track of which link is active\nconst NavBar = ({ \n  currentNavLink, \n  handleClickNavLink, \n  settings, \n  updateInfoBox\n }) => {\n  \n  const { day, difficulty, gold } = settings;\n\n  let rightNavLinks = ['HOME', 'MANAGEMENT', 'ADS', 'MARKET', 'MISSIONS', 'JOKER', 'STATS', 'NEW DAY' ];\n\n  rightNavLinks = rightNavLinks.map((navlink, idx) => {\n    \n    if (navlink === 'HOME') {\n      return <li \n        key={idx} \n        onClick={() => handleClickNavLink(navlink, difficulty)} \n        // only first link (HOME) will have different paddings\n        className={navlink === currentNavLink ? 'nav-link-home-active' : 'nav-link-home'}\n        onMouseOver={() => updateInfoBox(navlink, \"NAVBAR\")}\n        onMouseOut={() => updateInfoBox('NONE', \"NAVBAR\")}\n        >{navlink}</li>\n    } else {\n      return <li \n        key={idx} \n        onClick={() => handleClickNavLink(navlink, difficulty)}\n        className={navlink === currentNavLink ? 'nav-link-active' : 'nav-link'}\n        onMouseOver={() => updateInfoBox(navlink, \"NAVBAR\")}\n        onMouseOut={() => updateInfoBox('NONE', \"NAVBAR\")}\n        >{navlink}</li>\n    }\n  });\n\n  return(\n    <div className=\"navbar-wrap\">\n      <div className=\"navbar\">\n        <ul className=\"ul-left\">\n          <li id=\"day\">DAY: {day}</li>\n          <li\n            onMouseOver={() => updateInfoBox('GOLD', \"NAVBAR\")}\n            onMouseOut={() => updateInfoBox('NONE', \"NAVBAR\")}\n          >GOLD: {numberWithCommas(gold)}</li>\n        </ul>\n\n        <ul className=\"ul-right\">\n          {rightNavLinks}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default NavBar;","import React from 'react';\n\nconst WelcomeHome = ({ handleSetDifficulty }) => {\n  return(\n    <>\n      <p className=\"home-p\">Welcome to H-SIM B2.</p>\n      <br/>\n      <p className=\"home-p\">The Objective is to complete as\n      as many missions before day 360.</p>\n      <br/>\n      <p className=\"home-p\">Please choose a difficulty: </p>\n\n      <div className=\"difficulty-wrap\">\n        <div onClick={() => handleSetDifficulty('EASY')}>EASY</div>\n        <div onClick={() => handleSetDifficulty('MEDIUM')}>MEDIUM</div>\n        <div onClick={() => handleSetDifficulty('HARD')}>HARD</div>\n      </div>\n    </>\n  );\n}\n\nexport default WelcomeHome","import { connect } from 'react-redux';\nimport NavBar from '../components/navbar'\nimport { updateInfoBox } from '../actions/actions';\n\n\nconst mapStateToProps = state => {\n  return ({\n    settings: state.settings\n  });\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return ({\n    updateInfoBox: (info, component) => dispatch(updateInfoBox(info, component))\n  });\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);","import React from 'react';\n\n\nconst InfoBox = ({ info }) => {\n  return (\n    <div className=\"infobox-wrap\">\n      <p className=\"infobox-title\">INFOBOX</p>\n      \n      <div className=\"infobox-border\">\n        <div className=\"infobox-text\">\n          {info}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default InfoBox;","import { connect } from 'react-redux';\nimport InfoBox from '../components/InfoBox';\n// import { updateInfoBox } from '../actions/actions';\n\n\nconst mapStateToProps = state => {\n  return ({\n    info: state.settings.infobox\n  });\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return ({\n    // handleOnMouseOver: (info) => dispatch(updateInfoBox(info))\n  });\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InfoBox);","import React from 'react';\nimport WelcomeHome from './WelcomeHome';\nimport InfoBoxContainer from '../containers/InfoBoxContainer';\n\n// class Home extends React.Component {\nconst Home = ({ setDifficulty, difficulty, daysLeft }) => {\n  let homeBody;\n  let bottomInfoBox;\n\n  if (difficulty === null) {\n    homeBody = <WelcomeHome handleSetDifficulty={setDifficulty}/>\n  } else {\n    homeBody = (\n      <>\n        <p className=\"home-p\">Welcome to H-SIM B2.</p>\n        <br />\n        <p className=\"home-p\">The Objective is to complete as\n          as many missions before day 360.</p>\n        <br />\n        <p className=\"home-p\">Your difficulty chosen is: {difficulty}</p>\n        <br/>\n        <p className=\"home-p\">You have {daysLeft} days left.</p>\n        <br/>\n    \n        <p className=\"home-p\">Hover your mouse over text to see explanations for them in the infobox below</p>\n      </>\n    );\n\n    bottomInfoBox = <InfoBoxContainer />\n  }\n\n  return(\n    <div className=\"body-wrap\">\n      <div className=\"main-content\">\n        {homeBody}\n      </div>\n\n      {bottomInfoBox}\n    </div>\n  );\n}\n\nexport default Home;","import { connect } from 'react-redux';\nimport Home from '../components/Home';\nimport { setDifficulty } from '../actions/actions';\n\n\nconst mapStateToProps = state => {\n  return ({\n    difficulty: state.settings.difficulty,\n    daysLeft: 360 - state.settings.day\n  });\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return({\n    setDifficulty: difficulty => dispatch(setDifficulty(difficulty))\n  });\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from 'react';\nimport {\n  GIRL_PROFILE_PATHS,\n  numberWithCommas,\n  PRICES,\n  // ABILITIES_SERVICES\n} from '../util';\n\n\nconst SideBar = ({ \n    name, \n    girl, \n    stats, \n    updateGirlPrice, \n    updateGirlStat,\n    updateInfoBox,\n    potentialAbilities,\n    abilities,\n    handleConfirmTransaction,\n    inventory,\n    services\n  }) => {\n  // girl == {rank:1, location: \"RESTING\", ...}\n  // name == \"A2\"\n  \n  let statsArr = Object.keys(stats);\n  // statsArr == [\"health\", \"beauty\", \"libido\", \"fuck\", \"intelligence\", \"charisma\", \"obedience\", \"joy\", \"reputation\", \"exp\"]\n  // const statsArr = [\"HEALTH\", \"BEAUTY\", \"LIBDO\", \"FUCK\", \"BLOWJOB\", \"INTELLIGENCE\", \"CHARISMA\", \"OBEDIENCE\", \"JOY\", \"REPUTATION\", \"EXP\"];\n\n  // STATS *********************************************************************\n  let tableRows = statsArr.map((statName, idx) => {\n\n    let expNeeded = Math.ceil(stats[statName] * (1 + .01));\n\n    // don't display buttons for certain stats\n    if (idx === 0 || idx >= 7) {\n      return (\n        <tr key={idx}>\n          <td \n            className={statName === \"exp\" ? \"stats-name-exp\" : \"stats-name\"}\n            onMouseOver={() => updateInfoBox(statName, \"MANAGEMENT_SIDEBAR\")}\n            onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n          >{statName}</td>\n          <td className={statName === \"exp\" ? \"stats-num-exp\" : \"stats-num\"}>{numberWithCommas(stats[statName])}</td>\n          <td><button className=\"hidden-button\"></button></td>\n        </tr>\n      );\n    } else {\n      return (\n        <tr key={idx}>\n          <td \n            className=\"stats-name\"\n            onMouseOver={() => updateInfoBox(statName, \"MANAGEMENT_SIDEBAR\")}\n            onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n          >{statName}</td>\n          <td className=\"stats-num\">{stats[statName]}</td>\n          <td className=\"stats-td-button\"><button\n            className=\"stats-button\"\n            \n            onClick={_e => {\n              let enoughXP = (stats.exp - expNeeded) >= 0;\n\n              if (enoughXP) {\n                updateGirlStat(name, \"beauty\", stats[statName], stats.exp);\n              } else {\n                alert(`You need ${expNeeded} Experience Points to raise this stat!`);\n                // updateInfoBox(statName, \"MANAGEMENT_SIDEBAR\", expNeeded)\n              }\n            }}\n\n            onMouseOver={() => updateInfoBox(statName, \"MANAGEMENT_SIDEBAR\", expNeeded)}\n            onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n          >+</button>\n          </td>\n        </tr>\n      );\n    }\n  });\n  // remove last element in tableRows array (EXP), we will display this after the table\n  tableRows.pop();\n\n\n  // ABILITIES *****************************************************************\n  let abilitiesList = potentialAbilities.map((ability, idx) => {\n    // if the ability is learned\n    if (abilities.includes(ability)) {\n      return (\n        // <li \n        <button \n          key={idx} \n          className=\"learned-ability\"\n          onMouseOver={() => updateInfoBox(ability + \"_ENABLED\", \"MANAGEMENT_SIDEBAR\")}\n          onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n        // >{ability.toLowerCase()}</li>\n        >{ability.toLowerCase()}</button>\n      );\n    } else {\n      return (\n        // <li \n        <button \n          key={idx} \n          className=\"potential-ability\"\n          onClick={_e => {\n            let transactionInfo = {\n              type: \"ENABLE\",\n              category: \"ABILITY\",\n              item: { ability },\n              girlName: name,\n              currentXP: stats.exp,\n              rank: girl.rank,\n              rankNeeded: idx         // index position in array == rank needed to ubdate ability\n            };\n\n            handleConfirmTransaction(transactionInfo);\n          }}\n\n          onMouseOver={() => updateInfoBox(ability, \"MANAGEMENT_SIDEBAR\")}\n          onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n        // >{ability.toLowerCase()}</li>\n        >{ability.toLowerCase()}</button>\n      )\n    }\n  });\n\n\n  // INVENTORY *****************************************************************\n  let allInventory = [\"DRUGS\", \"RING\", \"PERFUME\", \"MAKEUP\", \"SILK DRESS\", \"PET CAT\", \"MIRROR\", \"DILDO\", \"BIRTH CONTROL\"];\n\n  let inventoryList = allInventory.map((equipment, idx) =>  {\n\n    // if equipment is already in girls inventory\n    if (inventory.includes(equipment)) {\n      return (\n        // <li \n        <button \n          key={idx} \n          className=\"inventory-li-owned\"\n          onMouseOver={() => updateInfoBox(equipment + \"_BOUGHT\", \"MANAGEMENT_SIDEBAR\")}\n          onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n        // >{equipment.toLowerCase()}</li>\n        >{equipment.toLowerCase()}</button>\n        );\n    } else {\n      return (\n        <button \n        // <li \n          key={idx} \n          className=\"inventory-li\"\n          onClick={_e => {\n            let transactionInfo = {\n              type: \"BUY\",\n              category: \"INVENTORY\",\n              item: equipment,\n              girlName: name,\n              cost: PRICES.INVENTORY[equipment]\n            };\n\n            handleConfirmTransaction(transactionInfo);\n          }}\n\n          onMouseOver={() => updateInfoBox(equipment, \"MANAGEMENT_SIDEBAR\")}\n          onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n        >{equipment.toLowerCase()}</button>\n        // >{equipment.toLowerCase()}</li>\n      );\n    }\n  });\n\n\n  // SERVICES ******************************************************************\n  // Object.keys(ABILITIES_SERVICES.SERVICES) == [\n  //   \"BLOWJOB CONDOM\", \"BLOWJOB SPIT\", \"BLOWJOB SWALLOW\", \"SEX CONDOM\", \n  //   \"SEX PULLOUT\", \"SEX CREAMPIE\", \"ANAL CONDOM\", \"ANAL CREAMPIE\", \n  //   \"GANGBANG\", \"GFE\"\n  // ];\n  \n  let servicesList = services.map((service, idx) => {\n    return (\n      <li \n        key={idx} \n        className=\"services-li\"\n        onMouseOver={() => updateInfoBox(service, \"MANAGEMENT_SIDEBAR\")}\n        onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n      >{service.toLowerCase()}</li>\n    );\n  });\n\n  const noGirlSelected = (name === null) ? true : false;\n\n  if (noGirlSelected) {\n    return (\n      <div className=\"sidebar-wrap\">\n        <p className=\"sidebar-nogirl-selected\">No girl selected</p>\n        <p className=\"sidebar-nogirl-selected\">Info about selected girl will appear here</p>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"sidebar-wrap\">\n        <p className=\"sidebar-name\">{name}</p>\n\n        <p \n          className=\"sidebar-rank\"\n          onMouseOver={() => updateInfoBox(\"RANK\", \"MANAGEMENT_SIDEBAR\")}\n          onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n        >\n          <span className=\"rank\">Rank: </span>\n          <span className=\"rank-num\">{girl.rank}</span>\n        </p>\n\n        <p \n          className=\"sidebar-location\"\n        >\n          <span \n            className=\"location\"\n            onMouseOver={() => updateInfoBox(\"LOCATION\", \"MANAGEMENT_SIDEBAR\")}\n            onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n          >Location: </span>\n          <span className=\"location-val\">{girl.location.toLowerCase()}</span>\n        </p>\n\n        <div className=\"price-cost\">\n          <p \n            className=\"price\"\n            onMouseOver={() => updateInfoBox(\"PRICE\", \"MANAGEMENT_SIDEBAR\")}\n            onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n          >Price: <span className=\"price-cost-val\">{girl.price}</span></p>\n          <p \n            className=\"cost\"\n            onMouseOver={() => updateInfoBox(\"COST\", \"MANAGEMENT_SIDEBAR\")}\n            onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n          >Cost: <span className=\"price-cost-val\">{girl.cost}</span></p>\n        </div>\n\n        <div className=\"set-price-cost\">\n          <button \n            className=\"minus-ten\" onClick={_e => updateGirlPrice(name, girl.price - 10)}\n            onMouseOver={() => updateInfoBox(\"MINUS10\", \"MANAGEMENT_SIDEBAR\")}\n            onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n          >-10</button>\n          <button \n            className=\"add-ten\" onClick={_e => updateGirlPrice(name, girl.price + 10)}\n            onMouseOver={() => updateInfoBox(\"PLUS10\", \"MANAGEMENT_SIDEBAR\")}\n            onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n          >+10</button>\n          <button \n            className=\"estimate\" onClick={_e => updateGirlPrice(name, girl.cost + 10)}\n            onMouseOver={() => updateInfoBox(\"ESTIMATE\", \"MANAGEMENT_SIDEBAR\")}\n            onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n          >Estimate</button>\n        </div>\n\n        <img\n          src={GIRL_PROFILE_PATHS[name]}\n          className=\"sidebar-pic\"\n          alt=\"sexy-profile\"\n        />\n\n        <div className=\"sidebar-bottom\">\n          <div className=\"sidebar-bottom-left\">\n            <div className=\"stats-wrap\">\n              <p className=\"stats-title\"\n                onMouseOver={() => updateInfoBox(\"STATS\", \"MANAGEMENT_SIDEBAR\")}\n                onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n              >Stats:</p>\n              <div className=\"stats\">\n                <table id=\"sidebar-stats-table\">\n                  <tbody>\n                    {tableRows}\n                  </tbody>\n                </table>\n              </div>\n\n              <span \n                className=\"stats-name-exp\"\n                onMouseOver={() => updateInfoBox(\"exp\", \"MANAGEMENT_SIDEBAR\")}\n                onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n              >EXP:\n                <p>{numberWithCommas(stats.exp)}</p>\n              </span>\n            </div>\n\n            <div className=\"services-wrap\">\n              {/* <p */}\n              <button\n                className=\"choose-services-button\"\n                onClick={_e => {\n                  let transactionInfo = {\n                    type: \"UPDATE\",\n                    category: \"SERVICES\",\n                    girlObj: girl,\n                    girlName: name,\n                    currentServices: services,\n                    currentXP: stats.exp,\n                    rank: girl.rank\n                  };\n\n                  handleConfirmTransaction(transactionInfo);\n                }}\n\n                onMouseOver={() => updateInfoBox(\"SERVICES\", \"MANAGEMENT_SIDEBAR\")}\n                onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n              >\n                Choose Services\n            {/* </p> */}\n            </button>\n              {servicesList}\n            </div>\n          </div>\n\n          <div className=\"sidebar-bottom-right\">\n            <div className=\"abilities-wrap\">\n              <p \n                className=\"abilities-title\"\n                onMouseOver={() => updateInfoBox(\"ABILITIES\", \"MANAGEMENT_SIDEBAR\")}\n                onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n              >Abilities:</p>\n              {abilitiesList}\n            </div>\n            <div className=\"inventory-wrap\">\n              <p \n                className=\"abilities-title\"\n                onMouseOver={() => updateInfoBox(\"INVENTORY\", \"MANAGEMENT_SIDEBAR\")}\n                onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_SIDEBAR\")}\n              >Inventory:</p>\n              {inventoryList}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SideBar;","import { connect } from 'react-redux';\nimport SideBar from '../components/sidebar';\nimport { \n  updateGirlPrice, \n  updateGirlStat,\n  updateInfoBox \n} from '../actions/actions';\n\n\nconst mapStateToProps = (state, ownProps) => {\n  let girlName = ownProps.girlName;\n  let girl = state.girls[girlName] || {};\n  // debugger\n\n  return ({\n    girl: girl,\n    name: girlName,\n    stats: girl.stats || {},\n    potentialAbilities: girl.potentialAbilities || [],\n    abilities: girl.abilities || [],\n    inventory: girl.inventory || [],\n    services: girl.services || []\n  });\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return ({\n    updateGirlPrice: (girl, newPrice) => dispatch(updateGirlPrice(girl, newPrice)),\n    updateGirlStat: (girl, statName, statNum, oldExp) => dispatch(updateGirlStat(girl, statName, statNum, oldExp)),\n    updateInfoBox: (sidebarItem, infoboxCategory, expNeeded) => dispatch(updateInfoBox(sidebarItem, infoboxCategory, expNeeded))\n  });\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideBar);","import React from 'react';\nimport {\n  handleOnDragStart,\n  handleOnDragOver, \n  handleOnDragEnter,\n  handleOnDragLeave,\n  GIRL_LOGO_PATHS,\n  // removeUnderscore,\n  // handleOnDrop\n} from '../util';\n\n\n\nclass Building extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { name, buildingsOwned } = this.props;\n\n    this.state = {\n      buildingIsOwned: buildingsOwned.includes(name),\n      buyBuildingModal: null,\n      mouseOverBuyBuildingButton: false\n    }\n  }\n\n\n  componentDidUpdate() {\n    // update local state if there was a change in redux store\n    if (this.state.buildingIsOwned !== this.props.buildingsOwned.includes(this.props.name)) {\n\n      // reset background color\n      this.buildingNode.parentElement.style.backgroundColor = \"white\";\n\n      this.setState({\n        buildingIsOwned: !this.state.buildingIsOwned,\n        buyBuildingModal: null,\n        mouseOverBuyBuildingButton: false\n      });\n    }\n  }\n\n\n  // generate li's\n  generateRooms = () => {\n    const { name, \n      // updateGirlLocation, \n      // buildingsOwned, \n      girls, \n      handleClickGirl, \n      currentSelection \n    } = this.props;\n    // girls == [\"A2\", true, null, null]\n\n    let oldLocation = name;\n\n    return (\n      girls.map((girl, idx) => {\n\n        // if room is bought and occupied\n        if (girl !== null && girl !== true) {\n          return (\n            <li\n              key={idx}\n\n              // if room is clicked\n              className={currentSelection === girl ? \"room-li-bought active\" : \"room-li-bought\"}\n              onClick={_e => handleClickGirl(girl)}\n            >\n              <img\n                src={GIRL_LOGO_PATHS[girl]}\n                className=\"logos\"\n                onDragStart={e => handleOnDragStart(e, girl, oldLocation)}\n                alt=\"logo\"\n              />\n            </li>\n          )\n        } else {\n          return (\n            <li\n              key={idx}\n              className={girl === true ? \"room-li-bought\" : \"room-li\"}\n            >{girl}</li>\n          );\n        }\n      })\n    );\n  }\n\n\n  generateUpgrades = () => {\n    const { \n      buildingsOwned, \n      // handleTransaction, \n      handleConfirmTransaction, \n      name, \n      girls, \n      upgradesOwned,\n      updateInfoBox\n    } = this.props;\n    // name == \"OLDSHACK\"\n    // girls == [\"A2\", true, null, null]\n    // upgradesOwned == { BAR: false, GARDEN: false, POOL: false, OPIUM_DEN: false }\n    let buildingBought = buildingsOwned.includes(name);\n    \n    // all rooms already bought\n    const allRoomsBought = !girls.includes(null);\n    \n    let upgrades = [ \"BAR\", \"OPIUM DEN\", \"POOL\", \"GARDEN\", \"ADD ROOM\" ];\n\n    upgrades = upgrades.map((upgrade, idx) => {\n      // upgrade already bought\n      let upgradeBought = upgradesOwned[upgrade];\n\n      if (buildingBought) {\n        return (\n          // <li \n          <button \n            key={idx}\n            // if upgrade has been bought, set differnt className\n            className={(upgradeBought) ? \"upgrade-li-bought\" : \"upgrade-li\"}\n\n            onClick={ _e => {\n              let transactionInfo = {\n                type: 'BUY',\n                category: 'UPGRADE',\n                building: name,         // \"OLDSHACK\"\n                item: upgrade           // \"Add Room\"\n              }\n              \n              // if user clicks on \"Add Room\" and allRoomsBought\n              if (upgrade === \"ADD ROOM\" && allRoomsBought) {\n                alert(\"you've already bought as many rooms as possible\");\n              \n              // if user clicks an upgrade option (\"Bar\") and upgrade already bought\n              } else if (upgrade !== \"ADD ROOM\" && upgradeBought) {\n                alert(\"you already upgraded this building with a \" + upgrade)\n              \n              // if user clicks an upgrade option (\"Bar\")\n              } else {\n                \n                // handleTransaction(transactionInfo);\n                handleConfirmTransaction(transactionInfo);\n              }\n            }}\n\n            onMouseOver={() => updateInfoBox(upgrade, \"MANAGEMENT_BUILDINGS\")}\n            onMouseOut={() => updateInfoBox('NONE', \"MANAGEMENT_BUILDINGS\")}\n          // >{upgrade.toLowerCase()}</li>\n          >{upgrade.toLowerCase()}</button>\n        );\n      }\n      return null;\n    });\n\n    return upgrades;\n  }\n\n\n  render() {\n    const { \n      name, \n      updateGirlLocation, \n      girls, \n      handleConfirmTransaction, \n      // buildingsOwned, \n      // handleClickGirl, \n      // currentSelection,\n      updateInfoBox \n    } = this.props;\n\n    const { buildingIsOwned, buyBuildingModal, mouseOverBuyBuildingButton } = this.state;\n\n    return (\n      <div\n        className={\"building-wrap \" + name}\n\n        onMouseEnter={(e) => {\n          // if the building hasn't been bought yet\n          if (!buildingIsOwned) {\n\n            // highlight background light grey to buy\n            e.currentTarget.style.backgroundColor = '#d3d3d3c4';\n            \n            // make \"buy building\" button reappear again\n            e.currentTarget.firstElementChild.style.display = \"block\";\n\n            let transactionInfo = { type: 'BUY', category: 'BUILDING', item: name}\n            // transactionInfo == { type: 'BUY', category: 'BUILDING', item: transactionInfo }\n            \n            // update buy building modal overlay\n            this.setState({\n              buyBuildingModal: \n                (<button \n                  className=\"buy-building\"\n                  onMouseEnter={_e => this.setState({ mouseOverBuyBuildingButton: true})}\n                  onMouseLeave={_e => this.setState({ mouseOverBuyBuildingButton: false })}\n                  onClick={e => { \n                    // grab building DOM element so we can reset background color in componentDidUpdate\n                    this.buildingNode = e.currentTarget;\n                                        \n                    handleConfirmTransaction(transactionInfo, this.buildingNode);\n                  }}\n                 >\n                  Buy Building\n                </button>)\n            });\n          }\n        }}\n\n        onMouseLeave={(e) => {\n          // if the building hasn't been bought yet, reset backgound color\n          if (!buildingIsOwned && !mouseOverBuyBuildingButton) {\n          \n            e.currentTarget.style.backgroundColor = 'white';\n\n            // reset buy building modal overlay\n            this.setState({\n              buyBuildingModal: null,\n              mouseOverBuyBuildingButton: false\n            });\n          }\n        }}\n\n        onMouseOver={() => {\n          // only if building is NOT owned, update infobox\n          if (!buildingIsOwned) {\n            updateInfoBox(name, \"MANAGEMENT_BUILDINGS\");\n          }\n        }}\n        onMouseOut={() => { \n          // only if building is NOT owned, reset infobox data\n          if (!buildingIsOwned) {\n            updateInfoBox('NONE', \"MANAGEMENT_BUILDINGS\");\n          }\n        }}\n\n        onDragOver={e => handleOnDragOver(e)}\n        onDragEnter={e => handleOnDragEnter(e)}\n        onDragLeave={e => handleOnDragLeave(e)}\n        onDrop={e => {\n          console.log('drop');\n\n          // get which girl we are dropping\n          let data = e.dataTransfer.getData(\"Text\").split(\" \");\n          let girl = data[0];\n          // girl == \"A2\"\n\n          let oldLocation = data[1];\n          // oldLocation == \"OLDSHACK\"\n\n          let newLocation = name;\n\n          // reset background color of building\n          e.currentTarget.style.backgroundColor = 'white';\n\n          // trying to drop on same location\n          if (newLocation === oldLocation) return;\n\n          let enoughRooms = girls.includes(true);\n          \n          let buildingBought = this.props.buildingsOwned.includes(name);\n\n          if (buildingBought && enoughRooms) {\n            updateGirlLocation(girl, oldLocation, newLocation);\n\n            // if you own the building, but not enough rooms\n          } else if (buildingBought && !enoughRooms) {\n            alert('No more space in this building! You need to add another room');\n\n          } else {\n            alert('You need to buy this building');\n          }\n        }}\n      >\n\n        {buyBuildingModal}\n\n        <p \n          className=\"building-name\"\n          onMouseOver={() => {\n            // only if building IS owned, update infobox\n            if (buildingIsOwned) { updateInfoBox(name, \"MANAGEMENT_BUILDINGS\")}\n          }}\n          onMouseOut={() => {\n            // only if building IS owned, reset infobox data\n            if (buildingIsOwned) { updateInfoBox('NONE', \"MANAGEMENT_BUILDINGS\")}\n          }}\n        >{name}</p>\n\n        <ul className={\"building-ul \" + name}>\n          {this.generateRooms()}\n        </ul>\n\n        <div className=\"upgrades\">\n          {this.generateUpgrades()}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Building;","import { connect } from 'react-redux';\nimport Building from '../components/building';\nimport { \n  updateGirlLocation, \n  handleTransaction,\n  updateInfoBox \n} from '../actions/actions';\n\n\n// state == global redux state/store\nconst mapStateToProps = (state, ownProps) => {\n  \n  // ownProps comes from management.jsx, props passed into BuildingContainer component\n  // ownProps == {name: \"OLDSHACK\", maxRooms: 4, ... }\n  const buildingName = ownProps.name;\n\n  const upgrades = {\n    BAR: state.locations[buildingName].BAR,\n    GARDEN: state.locations[buildingName].GARDEN,\n    POOL: state.locations[buildingName].POOL,\n    // OPIUM_DEN: state.locations[buildingName].OPIUM_DEN\n    \"OPIUM DEN\": state.locations[buildingName][\"OPIUM DEN\"]\n  }\n\n  return ({\n    girls: state.locations[buildingName].girls,\n    buildingsOwned: state.locations.BUILDINGS_OWNED,\n    upgradesOwned: upgrades\n  });\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return ({\n    updateGirlLocation: (girl, oldLocation, newLocation) => dispatch(updateGirlLocation(girl, oldLocation, newLocation)),\n    handleTransaction: (transactionInfo) => dispatch(handleTransaction(transactionInfo)),\n    updateInfoBox: (buildingName, infoboxCategory) => dispatch(updateInfoBox(buildingName, infoboxCategory))\n  });\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Building);","import React from 'react';\nimport {\n  handleOnDragStart,\n  handleOnDragOver,\n  handleOnDragEnter,\n  handleOnDragLeave,\n  // handleOnDrop\n} from '../util';\n\n\n\nconst RestSchool = ({ resting, school, updateGirlLocation, handleClickGirl }) => {\n  // resting == [\"A2\", \"Sakura\", ...]\n  let oldLocation = 'RESTING';\n  \n  // debugger\n\n  let girlsResting = resting.map((girl, idx) => {\n    return (\n      <li \n        key={idx} \n        className=\"resting-li\"\n        draggable={true}\n        onDragStart={e => handleOnDragStart(e, girl, oldLocation)}\n        onClick={_e => handleClickGirl(girl)}\n      >{girl}</li>\n    );\n  });\n\n  return (\n    <div className=\"rest-school-wrap\">\n      <p className=\"building-name\">REST OR SCHOOL</p>\n      <ul \n        className=\"resting-ul\"\n        onDragOver={e => handleOnDragOver(e)}\n        onDragEnter={e => handleOnDragEnter(e)}\n        onDragLeave={e => handleOnDragLeave(e)}\n        onDrop={e => {\n          console.log('drop');\n\n          // get which girl we are dropping\n          let data = e.dataTransfer.getData(\"Text\").split(\" \");\n          let girl = data[0];\n          // girl == \"A2\"\n\n          let oldLocation = data[1];\n          // oldLocation == \"OLDSHACK\"\n\n          let newLocation = \"RESTING\";\n\n          // reset background color of building\n          e.currentTarget.style.backgroundColor = 'white';\n          \n          updateGirlLocation(girl, oldLocation, newLocation);\n        }}\n      >\n        {girlsResting}\n      </ul>\n    </div>\n  );\n}\n\nexport default RestSchool;","import { connect } from 'react-redux';\nimport RestSchool from '../components/restSchool';\nimport { updateGirlLocation } from '../actions/actions';\n\n\nconst mapStateToProps = state => {\n  // debugger\n\n  return ({\n    resting: state.locations.RESTING.girls,   // array of girls resting\n    school: state.locations.SCHOOL            // array of girls in school\n  });\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return ({\n    updateGirlLocation: (girl, oldLocation, newLocation) => dispatch(updateGirlLocation(girl, oldLocation, newLocation))\n  });\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RestSchool);","import React from 'react';\nimport { ABILITIES_SERVICES, isValidService } from '../util';\n// import { handleTransaction } from '../actions/actions';\n\n// Tutorial: https://codepen.io/tantata/pen/QGVMza\n// http://react.tips/checkboxes-in-react-16/\n// https://reactjs.org/docs/forms.html\n\nclass ChooseServices extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // props.transactionInfo ==\n    // { type: \"UPDATE\", category: \"SERVICES\", girlName: \"SAKURA\", currentServices: Array(4), currentXP: 2000, rank: 3 }\n\n    this.allServices = Object.keys(ABILITIES_SERVICES.SERVICES);\n    // == [\n    //   \"BLOWJOB CONDOM\", \"BLOWJOB SPIT\", \"BLOWJOB SWALLOW\", \"SEX CONDOM\",\n    //   \"SEX PULLOUT\", \"SEX CREAMPIE\", \"ANAL CONDOM\", \"ANAL CREAMPIE\", \n    //   \"GANGBANG\", \"GFE\"\n    // ];\n\n    let currentServices = props.transactionInfo.currentServices;\n    // currentServices == [\"BLOWJOB CONDOM\", \"SEX CONDOM\", \"ANAL CONDOM\", \"GFE\"]\n    let servicesObj = {};\n\n    this.allServices.forEach(service => {\n      if (currentServices.includes(service)) {\n        servicesObj[service] = true;\n      } else {\n        servicesObj[service] = false;\n      }\n    });\n\n    this.state = {\n      ...servicesObj\n    }\n  }\n\n\n  handleChecked = (service) => {\n    this.setState({\n      [service]: !this.state[service]\n    });\n  }\n\n\n  // creates array of current services offered from state\n  getServices = () => {\n    let newServices = Object.keys(this.state).filter(service => this.state[service]);\n\n    return newServices;\n  }\n\n\n  render() {\n    const { handleCloseModal, handleTransaction } = this.props;\n    let { girlName } = this.props.transactionInfo;\n    // let { type, category, girlName, currentServices, currentXP, rank } = transactionInfo;\n    // debugger\n\n    let tableRows = this.allServices.map( (service, idx) => {\n\n        return (\n          <tr key={idx}>\n            <td>{service.toLowerCase()}</td>\n            <td><input \n              type=\"checkbox\" \n              onChange={(e) => {\n                let isChecked = e.currentTarget.checked;\n                let currentNumChecked = this.getServices().length;\n                let newNumChecked = (isChecked) ? (currentNumChecked + 1) : (currentNumChecked - 1);\n                let girlObject = this.props.transactionInfo.girlObj;\n                let validService = isValidService(girlObject, service);\n\n                // Make sure only 3 checkboxes are checked\n                if (newNumChecked > 3) {\n                  alert(\"You can only choose up to 3 services!\");\n                \n                // check if girls appropriate stats are high enough\n                } else if (validService === true) {\n                  \n                  this.handleChecked(service);\n                \n                // girls appropriate stats are not high enough\n                } else {\n                  let message = validService.split(\" \");\n                  let neededStatName = message[0];\n                  let neededStatNum = message[1];\n\n                  if (message.length <= 2) {\n                    message = `Your ${neededStatName} stat needs to be at least ${neededStatNum}`;\n                  } else {\n                    message = `Your ${neededStatName} stat needs to be at least ${neededStatNum}` +\n                      ` and your ${message[2]} stat needs to be at least ${message[3]}`;\n                  }\n\n                  alert(message);\n                }\n              }} \n              checked={this.state[service]} \n            /></td>\n          </tr>\n        );\n    });\n\n    return (\n      <div className=\"choose-services-table-wrap\">\n        <p className=\"choose-services-modal-title\">Choose Services (Max 3):</p>\n        <table id=\"choose-services-table\">\n          <tbody>\n            {tableRows}\n          </tbody>\n        </table>\n\n        <div className=\"services-modal-bottom\">\n          <button onClick={(_e) => {\n            // info needed to update store\n            let servicesInfo = {\n              girlName: girlName,\n              type: \"UPDATE\",\n              category: \"GIRL_SERVICES\",\n              newServices: this.getServices()\n            };\n\n            handleTransaction(servicesInfo);\n\n            handleCloseModal();\n          }}>OK</button>\n\n          <button onClick={handleCloseModal}>CANCEL</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ChooseServices;","import React from 'react';\nimport {\n  PRICES,\n  numberWithCommas\n} from '../util';\nimport ChooseServices from './chooseServices';\n\n// const PRICES = {\n//   BUILDING: {\n//     \"SMALL_HOUSE\": 10000,\n//     \"HOUSE\": 20000,\n//     \"MANSION\": 30000,\n//     \"PALACE\": 40000\n//   },\n\n//   UPGRADE: {\n//     \"BAR\": 1000,\n//     \"OPIUM_DEN\": 5000,\n//     \"POOL\": 10000,\n//     \"GARDEN\": 2000,\n//     \"Add Room\": 5000\n//   }\n// }\n\n\nconst TransactionModal = ({ \n    transactionInfo, \n    handleCloseModal, \n    handleTransaction, \n    updateGirlXP,\n    gold }) => {\n  // transactionInfo comes from ownProps not redux store\n  // transactionInfo == { type: 'BUY', category: 'BUILDING', item: 'SMALL_HOUSE' }\n  // transactionInfo == { type: \"BUY\", category: \"UPGRADE\", building: \"SMALL_HOUSE\", item: \"BAR\" }\n  // transactionInfo == {\n  //   type: \"ENABLE\",\n  //   category: \"ABILITY\",\n  //   item: { ability },\n  //   girlName: name,\n  //   currentXP: 121,\n  //   rank: 1,\n  //   rankNeeded: 1      // index position in array of abilities (in girls obj)\n  // };\n\n  let price;\n  let unit;\n  let prompt;\n  let requiredRank;\n\n  // UPDATING ABILITIES ********************************************************\n  if (transactionInfo.type === \"ENABLE\") {\n    price = 1000;\n    unit = \"XP\";\n    requiredRank = transactionInfo.rankNeeded + 1;\n    let { type, category, currentXP, rank, girlName, item } = transactionInfo;\n\n    prompt = (\n      <>\n        <p>Are you sure you want to {type} this {category}?</p>\n        <p className=\"rank-needed\">You must be at least Rank {requiredRank} to enable this ability.</p>\n        <p>Cost: {numberWithCommas(price) + \" \" + unit}</p>\n        \n        <div className=\"transaction-modal-bottom\">\n          <button onClick={(_e) => {\n\n            // check if user has enough experience points and rank\n            if (currentXP >= price && rank >= requiredRank) {\n\n              // close modal\n              handleCloseModal();\n\n              // update redux store\n              updateGirlXP(girlName, currentXP, price, item.ability);\n\n              // user has enough experience points, but not rank\n            } else if (currentXP > price && rank < requiredRank) {\n              alert(`This girl must be at least rank ${requiredRank}, in order to enable this ability`);\n              handleCloseModal();\n\n              // user has rank, but not enough experience points\n            } else {\n              alert('You don\\'t have enough experience points for that!');\n              handleCloseModal();\n            }\n          }}>OK</button>\n\n          <button onClick={handleCloseModal}>CANCEL</button> \n        </div>\n      </>\n    );\n  \n\n  // CHOOSING SERVICES *********************************************************\n  } else if (transactionInfo.category === \"SERVICES\") {\n    // transactionInfo ==\n    // { type: \"UPDATE\", category: \"SERVICES\", girlName: \"SAKURA\", currentServices: Array(4), currentXP: 2000, rank: 3 }\n    // let { type, category, girlName, currentServices, currentXP, rank } = transactionInfo;\n\n    prompt = (<ChooseServices \n      transactionInfo={transactionInfo} \n      handleCloseModal={handleCloseModal}\n      handleTransaction={handleTransaction}\n    />);\n    \n\n    // BUYING BUILDING, ROOM, INVENTORY ****************************************\n  } else {\n    let { category, item, type } = transactionInfo;\n\n    price = PRICES[category][item];\n    unit = \"Gold\";\n    \n    prompt = (\n      <>\n        <p>Are you sure you want to {type} this {item}?</p>\n        <p>Cost: {numberWithCommas(price) + \" \" + unit}</p>\n\n        <div className=\"transaction-modal-bottom\">\n          <button onClick={(_e) => {\n\n            // check if user has enough cash\n            if (gold >= price) {\n\n              // close modal\n              handleCloseModal();\n\n              // update redux store\n              handleTransaction(transactionInfo);\n            } else {\n              alert('You don\\'t have enough funds for that!');\n              handleCloseModal();\n            }\n          }}>OK</button>\n\n          <button onClick={handleCloseModal}>CANCEL</button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"confirm-transaction-modal-wrap\">\n      <div className={transactionInfo.category === \"SERVICES\" ? \"confirm-services\": \"confirm-transaction\"}>\n        {prompt}\n        {/* <p>Cost: {numberWithCommas(price) + \" \" + unit}</p> */}\n        {/* <div className=\"transaction-modal-bottom\">\n          {okButton}\n          <button onClick={handleCloseModal}>CANCEL</button> */}\n        {/* </div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default TransactionModal;","import { connect } from 'react-redux';\nimport TransactionModal from '../components/TransactionModal';\nimport { handleTransaction, updateGirlXP } from '../actions/actions';\n\n\n// state == global redux state/store\nconst mapStateToProps = (state, ownProps) => {\n\n  // ownProps comes from management.jsx, props passed into TransactionModal component\n\n  return ({\n    gold: state.settings.gold\n  });\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  // debugger\n\n  return ({\n    handleTransaction: (transactionInfo) => dispatch(handleTransaction(transactionInfo)),\n    updateGirlXP: (girlName, currentXP, cost, ability) => dispatch(updateGirlXP(girlName, currentXP, cost, ability))\n  });\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionModal);","import React from 'react';\nimport SideBarContainer from '../containers/SideBarContainer';\nimport InfoBoxContainer from '../containers/InfoBoxContainer';\nimport BuildingContainer from '../containers/BuildingContainer';\nimport RestSchoolContainer from '../containers/RestSchoolContainer';\nimport TransactionModalContainer from '../containers/TransactionModalContainer';\n\n\nclass Management extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      buildings: [],                    // tracks which girl is clicked as 2d array\n      currentSelection: null,           // tracks which girl is clicked\n      displayTransactionModal: false,\n      transactionInfo: {},              // tracks info to display in modal\n      buildingNode: null\n    };\n  }\n\n\n  handleClickGirl = (girl) => {\n    this.setState({\n      currentSelection: girl\n    });\n  }\n\n\n  handleConfirmTransaction = (transactionInfo, buildingNode) => {\n    // transactionInfo == { type: \"BUY\", category: \"BUILDING\", item: \"SMALL_HOUSE\" }\n    // transactionInfo == { type: \"BUY\", category: \"UPGRADE\", building: \"SMALL_HOUSE\", item: \"BAR\" }\n    // transactionInfo = {\n    //   type: \"ENABLE\",\n    //   category: \"ABILITY\",\n    //   item: { ability },\n    //   girlName: name,\n    //   currentXP: 121,\n    //   rank: 1\n    // };\n    // buildingNode only for buying buildings, undefined otherwise\n    // buildingNode == <div>Buy Building</div>\n    \n    this.setState({\n      displayTransactionModal: true,\n      transactionInfo,\n      buildingNode\n    });\n  }\n\n\n  handleCloseModal = () => {\n    let building = this.state.buildingNode;\n    // remove Buy Building Button if we clicked cancel after clicking buy building\n    if (building) {\n      building.style.display = \"none\";\n      building.parentElement.style.backgroundColor = \"white\";\n    }\n\n    this.setState({\n      displayTransactionModal: false,\n      transactionInfo: {},\n      buildingNode: null\n    });\n  }\n\n\n  render() {\n\n    let transactionModal;\n    if (this.state.displayTransactionModal) {\n      transactionModal = (\n        <TransactionModalContainer \n          transactionInfo={this.state.transactionInfo} \n          handleCloseModal={this.handleCloseModal}/>\n      );\n    }\n\n    return (\n      <div className=\"management-wrap\">\n        <SideBarContainer \n          girlName={this.state.currentSelection}\n          handleConfirmTransaction={this.handleConfirmTransaction}\n        />\n  \n        <div className=\"right-content\">\n          <div className=\"top-content\">\n            <div className=\"top-buildings\">\n              <BuildingContainer \n                name=\"OLDSHACK\" \n                currentSelection={this.state.currentSelection}\n                handleConfirmTransaction={this.handleConfirmTransaction}\n                handleClickGirl={this.handleClickGirl}/>        \n              <BuildingContainer \n                name=\"SMALL_HOUSE\" \n                currentSelection={this.state.currentSelection}\n                handleClickGirl={this.handleClickGirl}\n                handleConfirmTransaction={this.handleConfirmTransaction}/>\n              <BuildingContainer \n                name=\"HOUSE\" \n                currentSelection={this.state.currentSelection}\n                handleClickGirl={this.handleClickGirl}\n                handleConfirmTransaction={this.handleConfirmTransaction}/>\n            </div>\n            <div className=\"bottom-buildings\">\n              <BuildingContainer \n                name=\"MANSION\" \n                currentSelection={this.state.currentSelection}\n                handleClickGirl={this.handleClickGirl}\n                handleConfirmTransaction={this.handleConfirmTransaction}/>\n              <BuildingContainer \n                name=\"PALACE\" \n                currentSelection={this.state.currentSelection}\n                handleClickGirl={this.handleClickGirl}\n                handleConfirmTransaction={this.handleConfirmTransaction}/>\n              <RestSchoolContainer \n                handleClickGirl={this.handleClickGirl}/>\n            </div>\n          </div>\n  \n          <InfoBoxContainer />\n        </div>\n\n        {transactionModal}\n      </div>\n    );\n  }\n}\n\nexport default Management;","import React from 'react';\n\nconst Advertising = () => {\n  return (\n    <div className=\"body-wrap\">ADVERTISING</div>\n  );\n}\n\nexport default Advertising;","import React from 'react';\nimport InfoBoxContainer from '../containers/InfoBoxContainer';\n\nconst Market = () => {\n  return (\n    <div className=\"body-wrap\">MARKET\n      <InfoBoxContainer />\n    </div>\n  );\n}\n\nexport default Market;","import React from 'react';\n\n\nconst Missions = () => {\n  return (\n    <div className=\"body-wrap\">MISSIONS</div>\n  );\n}\n\nexport default Missions;","import React from 'react';\n\n\nconst Joker = () => {\n  return (\n    <div className=\"body-wrap\">JOKER</div>\n  );\n}\n\nexport default Joker;","import React from 'react';\n\n\nconst Stats = () => {\n  return (\n    <div className=\"body-wrap\">STATS</div>\n  );\n}\n\nexport default Stats;","import React from 'react';\n\n\nconst NewDay = () => {\n  return (\n    <div className=\"body-wrap\">NEW DAY</div>\n  );\n}\n\nexport default NewDay;","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './reducers/rootReducer';\r\nimport './App.css';\r\nimport NavBarContainer from './containers/NavBarContainer';\r\nimport HomeContainer from './containers/HomeContainer';\r\nimport Management from './components/management';\r\nimport Advertising from './components/advertising';\r\nimport Market from './components/market';\r\nimport Missions from './components/missions';\r\nimport Joker from './components/joker';\r\nimport Stats from './components/stats';\r\nimport NewDay from './components/newday';\r\n// import InfoBox from './components/infoBox';\r\n\r\n// creates the redux store (object) of the entire app\r\nconst store = createStore(rootReducer);                                       \r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // FOR TESTING\r\n    window.getState = store.getState;\r\n    console.log(\"previous state:\")\r\n    console.log(store.getState());\r\n\r\n    // Local state used to track which \"page\" the user is on\r\n    this.state = {\r\n      activeNavLink: 'HOME'\r\n    }\r\n  }\r\n\r\n\r\n  handleClickNavLink = (newNavLink, difficulty) => {\r\n    if (difficulty === null) {\r\n      alert('Please choose difficulty first');\r\n    } else {\r\n      this.setState({\r\n        activeNavLink: newNavLink\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  // componentDidUpdate() {\r\n  //   console.log('new local state: ', this.state.activeNavLink);\r\n  // }\r\n\r\n\r\n  render() {\r\n\r\n    // Depending on local state, render appropriate Body Component\r\n    let body;\r\n    switch (this.state.activeNavLink) {\r\n      case('HOME'):\r\n        body = <HomeContainer />\r\n        break;\r\n      case('MANAGEMENT'):\r\n        body = <Management />\r\n        break;\r\n      case ('ADS'):\r\n        body = <Advertising />\r\n        break;\r\n      case('MARKET'):\r\n        body = <Market />\r\n        break;\r\n      case('MISSIONS'):\r\n        body = <Missions />\r\n        break;\r\n      case('JOKER'):\r\n        body = <Joker />\r\n        break;\r\n      case('STATS'):\r\n        body = <Stats />\r\n        break;\r\n      case('NEW DAY'):\r\n        body = <NewDay />\r\n        break;\r\n      default:\r\n        body = <HomeContainer />\r\n    }\r\n\r\n    return (\r\n      // Provider makes the redux store available to al nested components wrapped in connect()\r\n      <Provider store={store}>\r\n        <div className=\"App\">\r\n          <NavBarContainer currentNavLink={this.state.activeNavLink} handleClickNavLink={this.handleClickNavLink}/>\r\n          {body}\r\n        </div>\r\n      </Provider>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import store from './app/store';\r\n// import { Provider } from 'react-redux';\r\n\r\n\r\n// ENTRY POINT FILE\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n  // grab root html element from index.html\r\n  const root = document.getElementById('root');\r\n\r\n  ReactDOM.render(<App/>, root);\r\n});\r\n"],"sourceRoot":""}